"""
Variable Neighborhood Search

Neighborhood 1: The single-flip neighborhood .
Neighborhood 2: A double-flip neighborhood, where if element at index j is flipped, then element at index j+1 is also flipped. 
Neighborhood 3: A Hamming distance is less than or equal to 1. 

"""

#hill climbing search


#need some python libraries
import copy
from random import Random
import numpy as np
import itertools

#to setup a random number generator, we will specify a "seed" value
seed = 12345
myPRNG = Random(seed)

#number of elements in a solution
n = 500

#define max weight for the knapsack
maxWeight = 4*n

#monitor the number of solutions evaluated
solutionsChecked = 0
      
#initialize values and weights
values = []
weights = []
create_random_instance(values, weights)

#define the solution variables
x_curr = [] #x_curr will hold the current solution 


#let's create an instance for the knapsack problem
def create_random_instance(values, weights):
    #values = []
    for i in xrange(0,n):
        values.append(myPRNG.randint(10,100))
        
    #weights = []
    for i in xrange(0,n):
        weights.append(myPRNG.randint(5,15))
    
def calc_weight(x):
    a=np.array(x)
    c=np.array(weights)
    totalWeight = np.dot(a,c)    #compute the weight value of the knapsack selection
    return totalWeight

#function to evaluate a solution x
def evaluate(x):
          
    a=np.array(x)
    b=np.array(values)
    #c=np.array(weights)
    
    value = np.dot(a,b)          #compute the cost value of the knapsack selection
    totalWeight = calc_weight(x) #np.dot(a,c)    #compute the weight value of the knapsack selection
    
    if totalWeight > maxWeight:
        value =  maxWeight - totalWeight
        #value = -1

    return value
          
       
#function to create a 1-flip neighborhood of solution x         
def one_flip_neighborhood(x):
        
    nbrhood = []     
    
    for i in xrange(0,n):
        nbrhood.append(x[:])
        if nbrhood[i][i] == 1:
            nbrhood[i][i] = 0
        else:
            nbrhood[i][i] = 1
      
    return nbrhood
          
#function to create double-flip neighborhood
def double_flip_neighborhood(x):
    nbrhood = []     
        
    for i in xrange(0,n):
        nbrhood.append(x[:])
        #flip first index
        if nbrhood[i][i] == 1:
            nbrhood[i][i] = 0
        else:
            nbrhood[i][i] = 1
        
        #flip second index if within range
        if i < len(x):
            if nbrhood[i][i+1] == 1:
                nbrhood[i][i+1] = 0
            else:
                nbrhood[i][i+1] = 1        
      
    return nbrhood    

#function to create swap neighborhood
def swap_neighborhood(x):
    nbrhood = []     
    
    indices = range(0, n)
    
    ij_swaps = itertools.combinations_with_replacement(indices, 2)
    
    for (i, j) in ij_swaps:
        new = x[:]
        
        if new[i] == 1:
            new[i] = 0
        else:
            new[i] = 1
        
        if new[j] == 1:
            new[j] = 0
        else:
            new[j] = 1        

        nbrhood.append(new)
        
      
    return nbrhood    



#start with a random solution
for i in xrange(0,n):
    #x_curr.append(myPRNG.randint(0,1))
    
    if myPRNG.random() < 0.7:
        x_curr.append(0)
    else:
        x_curr.append(1)

#begin local search overall logic
done = 0

x_best = x_curr[:]   #x_best will hold the best solution 
f_curr = evaluate(x_curr)  #f_curr will hold the "fitness" of the current soluton 
f_best = f_curr

kMax = 3
    
while done == 0:
     
    k = 1
    
    while k < kMax:
        
        #"shaking": get random solution in Nk(current)  
        #"local search for local optima:" Then find the local optimum solution using the neighborhood
        if k == 1:
            s = myPRNG.choice(one_flip_neighborhood(current))
            
            Neighborhood = one_flip_neighborhood(s)
        
        if k == 2:
            s = myPRNG.choice(double_flip_neighborhood(current))
            
            
            Neighborhood = double_flip_neighborhood(s)
        if k == 3:
            s = myPRNG.choice(swap_neighborhood(current))
            
            Neighborhood = swap_neighborhood(s)
      
        
        s_star = None
        s_starVal = None
        for sol in Neighborhood:            
            solutionsChecked = solutionsChecked + 1
            if evaluate(sol) > s_starVal:   
                s_star = sol[:]              #find the best member and keep track of that solution
                s_starVal = evaluate(sol)       #and evaluation value            
                
        if f_best == f_curr:               #if there were no improving solutions in the neighborhood
            done = 1
        else:
            print "\nTotal number of solutions checked: ", solutionsChecked
            print "Best value found: ", f_best
            print "Best solution: ", x_best        
            x_curr = x_best[:]         #else: move to the neighbor solution and continue
            f_curr = f_best            #evalute the current solution
            
    
print "\nFinal: Total number of solutions checked: ", solutionsChecked
print "Best value found: ", f_best
print "Weight of knapsack: ", calc_weight(x_best)
print "Best solution: ", x_best


